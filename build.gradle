plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply from: "$rootDir/gradle/versioning.gradle"

group = 'ch.so.agi.ilivalidator'

description = """ilivalidator web service"""

sourceCompatibility = '17'
targetCompatibility = '17'

compileJava {
    options.compilerArgs.addAll(['--release', '17'])
}

bootJar {
   archiveName = baseName + "-" + version + "-exec.jar"
}

repositories {
    mavenCentral()
    maven { url "https://jars.interlis.ch/" }
}

configurations.all {
    resolutionStrategy {
        force 'ch.interlis:ili2c-tool:5.2.3'
        force 'ch.interlis:ili2c-core:5.2.3'    
    }
}
    
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'commons-io:commons-io:2.11.0'  
    implementation 'ch.interlis:ilivalidator:1.11.15-SNAPSHOT'
    implementation 'io.github.sogis:ilivalidator-custom-functions:1.1.47'
    implementation 'org.jobrunr:jobrunr-spring-boot-starter:5.1.5'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
    runtimeOnly 'org.xerial:sqlite-jdbc' 
    runtimeOnly 'com.h2database:h2'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.jsoup:jsoup:1.12.1'
    testImplementation 'org.testcontainers:testcontainers:1.17.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.17.3'
    testImplementation 'org.awaitility:awaitility-groovy:4.2.0'
}

tasks.named('test') {
    useJUnitPlatform {
        excludeTags 'docker'
    }
    failFast = true
    testLogging {
        showStandardStreams = true
    }   
}

//def DOCKER_ACCOUNT = "sogis"
def DOCKER_ACCOUNT = "edigonzales"
def DOCKER_REPO = "ilivalidator-web-service"

task buildImage4Test(type: Exec) {
    workingDir "$projectDir"
    commandLine 'docker', 'build',
                '--no-cache', '--force-rm',
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:latest",
                '-f', 'Dockerfile',  '.'
}

task dockerTest(type: Test) {
    description = 'Runs the docker tests.'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'docker'
    }
    failFast = true
    testLogging {
        showStandardStreams = true
    }   
    
    mustRunAfter test
}

// When used local you have to create an buildx env: 'docker buildx create --use'
// This is not necessary with Github Action.
task buildAndPushImages(type: Exec) {
    def githash = getCheckedOutGitCommitHash()
    def buildTimestamp = getTimestamp()

    workingDir "$projectDir"
    commandLine 'docker', 'buildx', 'build',
                '--platform', 'linux/arm64,linux/amd64',
                '--no-cache', '--force-rm', '--push',
                '--label', "org.opencontainers.image.title=$project.description",
                '--label', "org.opencontainers.image.version=$version",
                '--label', "org.opencontainers.image.base.name=docker.io/bellsoft/liberica-openjdk-alpine-musl:17.0.3",
                '--label', "org.opencontainers.image.created=$buildTimestamp", 
                '--label', "org.opencontainers.image.revision=$githash",
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:latest",
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:$version.major",
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:"+version.major+"."+version.minor,
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:$version",
                '-f', 'Dockerfile',  '.'
}

task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${getTimestamp()}
Application-name: ilivalidator-web-service
"""
    }
}

task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/static/"
}

copyVersionTxt.dependsOn(versionTxt)
processResources.dependsOn(copyVersionTxt)

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}