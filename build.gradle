buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "com.bmuschko.docker-remote-api" version "3.6.1"
    id "org.unbroken-dome.test-sets" version "2.1.1"
}
 
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: "com.bmuschko.docker-remote-api"
apply from: "$rootDir/gradle/versioning.gradle"

group = 'ch.so.agi.ilivalidator'

description = """ilivalidator web service"""

// A launch script will be added. Therefor it is
// not a jar anymore but zip file and jar xf *.jar
// will not work.
/*
bootJar {
    launchScript()
}
*/

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

testSets {
    dockerTest
}

sourceSets {
    dockerTestRuntime {
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

repositories {
    jcenter()
    maven { url "http://jars.interlis.ch/" }
    maven { url "http://repo.maven.apache.org/maven2" }
}

configurations {
    customFunctionsDeps
    customFunctionsDeps.transitive = false
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    compile("commons-io:commons-io:2.5")
    compile("ch.interlis:ilivalidator:1.8.1")
    compile("org.webjars:materializecss:0.100.1")
    compile("org.webjars:jquery:2.2.4")
    compile("org.jgrapht:jgrapht-core:1.3.0") // only needed for the custom functions
    customFunctionsDeps("ch.so.agi.ilivalidator:ilivalidator-extension-functions:1.0.+")
    //customFunctionsDeps("ch.so.agi.ilivalidator:ilivalidator-extension-functions:1.0.15")
    //customFunctionsDeps("ch.so.agi.ilivalidator:ilivalidator-extension-functions:1.0.28")
    testCompile("io.rest-assured:rest-assured:3.0.6")
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude(module: 'commons-logging')
    }
    dockerTestCompile("io.rest-assured:rest-assured:3.0.6")
    dockerTestCompile sourceSets.test.output      
}

test {
    testLogging {
        showStandardStreams = true
    }
}

task deleteFilesLibsExt(type: Delete) {
    delete fileTree('src/main/resources/libs-ext/') {
        include '**.jar'
    }
}

task copyToLibsExt(type: Copy) {
    from configurations.customFunctionsDeps
    into "src/main/resources/libs-ext/"
}
copyToLibsExt.dependsOn(deleteFilesLibsExt)
build.dependsOn(copyToLibsExt)
classes.dependsOn(copyToLibsExt)

task deleteFilesJarDir(type: Delete) {
    delete fileTree("${buildDir}/dependency/")//.listFiles()
    delete file("${buildDir}/dependency/")
}

task unzipJar(type: Copy) {
    from zipTree(file("${buildDir}/libs/ilivalidator-web-service-"+version+".jar"))
    into file("${buildDir}/dependency/")
}
unzipJar.dependsOn(deleteFilesJarDir)
bootJar.finalizedBy(unzipJar)

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerLogsContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer.ExposedPort

docker {
    registryCredentials {
        username = System.env.dockerRegistryUser
        password = System.env.dockerRegistryPass
    }
}

task buildDockerImage(type: DockerBuildImage) {
    description = "Build docker image."
    inputDir = project.rootDir
    //tag = "sogis/ilivalidator-web-service:${version}"
    tags = ["sogis/ilivalidator-web-service:"+version, "sogis/ilivalidator-web-service:latest"]
    labels = ["ilivalidator-web-service.created": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), 
            "ilivalidator-web-service.git_commit": getCheckedOutGitCommitHash(), 
            "ilivalidator-web-service.travis_build": version]
}

task createDockerContainer(dependsOn: 'buildDockerImage', type: DockerCreateContainer) {
    description = "Create docker container."
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ['8888:8888']
    exposedPorts = [new ExposedPort("tcp", [8888])]
    
}

task startDockerContainer(dependsOn: 'createDockerContainer', type: DockerStartContainer) {	
    description = "Start docker container."
    targetContainerId { createDockerContainer.getContainerId() }

    // Starting container != web service is ready.
    doLast { 
        sleep(10*1000)
    }
}

task logDockerContainer(type: DockerLogsContainer) {
    description = "Show docker container logs on standard out."
    targetContainerId { startDockerContainer.getContainerId() }
    follow = true
    tailAll = true
}

task stopDockerContainer(type: DockerStopContainer) {
    description = "Stop running docker container."
    targetContainerId { createDockerContainer.getContainerId() }
}

task pushDockerImage_One(type: DockerPushImage) {
    description = "Push docker image to hub.docker.com (only if docker tests were successful)."
    onlyIf {
        dockerTest.state.failure == null
    }
    imageName = buildDockerImage.tags[0]
}

task pushDockerImage_Two(type: DockerPushImage) {
    description = "Push docker image to hub.docker.com (only if docker tests were successful)."
    onlyIf {
        dockerTest.state.failure == null
    }
    imageName = buildDockerImage.tags[1]
}

task pushDockerImages() {
    doFirst{
        println "Push Docker Images"
    }
}

pushDockerImages.dependsOn {
    tasks.findAll { task -> task.name.startsWith('pushDockerImage_') }
}


// TODO: How to show docker log. Seems to stall b/c of finalizedBy?
// At least standard out is in gradle docker test reports.
//startDockerContainer.finalizedBy('logDockerContainer')

dockerTest.dependsOn('startDockerContainer')
dockerTest.finalizedBy('stopDockerContainer')//, 'pushDockerImage_One', 'pushDockerImage_Two')

import java.text.SimpleDateFormat

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: ilivalidator-web-service
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/templates/"
}
copyVersionTxt.dependsOn(versionTxt)
build.dependsOn(copyVersionTxt)
classes.dependsOn(copyVersionTxt)
